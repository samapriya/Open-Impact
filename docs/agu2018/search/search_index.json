{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sensor Fusion and Analysis Ready Data with the Planet Platform (WS32) Sunday, 9 th December 8:00 a.m.-4:00 p.m. Constitution AB and B Corridor, Grand Hyatt","title":"AGU 2018 Scientific Workshop"},{"location":"#sensor-fusion-and-analysis-ready-data-with-the-planet-platform-ws32","text":"","title":"Sensor Fusion and Analysis Ready Data with the Planet Platform (WS32)"},{"location":"#sunday-9th-december","text":"","title":"Sunday, 9th December"},{"location":"#800-am-400-pm","text":"","title":"8:00 a.m.-4:00 p.m."},{"location":"#constitution-ab-and-b-corridor-grand-hyatt","text":"","title":"Constitution AB and B Corridor, Grand Hyatt"},{"location":"citations/","text":"Citations Citing Planet Data From a concept in our garage, to operating the largest fleet of Earth-imaging satellites, many people have invested time and energy in developing and enabling access to Planet\u2019s unique data feed. Please cite Planet when using our imagery and tools. To cite Planet data in publications, please use the following: Planet Team (2017). Planet Application Program Interface: In Space for Life on Earth. San Francisco, CA. https://api.planet.com. Citing Tools If you use my tool and find it useful, you can cite that too Planet-GEE-Pipeline-CLI Samapriya Roy. (2018, November 20). samapriya/Planet-GEE-Pipeline-CLI: Planet-GEE-Pipeline-CLI (Version 0.4.2). Zenodo. http://doi.org/10.5281/zenodo.1491969 GEE Asset Manager Addons Samapriya Roy. (2018, November 30). samapriya/porder: porder: Simple CLI for Planet ordersV2 API (Version 0.0.2). Zenodo. http://doi.org/10.5281/zenodo.1729730","title":"Citations"},{"location":"citations/#citations","text":"","title":"Citations"},{"location":"citations/#citing-planet-data","text":"From a concept in our garage, to operating the largest fleet of Earth-imaging satellites, many people have invested time and energy in developing and enabling access to Planet\u2019s unique data feed. Please cite Planet when using our imagery and tools. To cite Planet data in publications, please use the following: Planet Team (2017). Planet Application Program Interface: In Space for Life on Earth. San Francisco, CA. https://api.planet.com.","title":"Citing Planet Data"},{"location":"citations/#citing-tools","text":"If you use my tool and find it useful, you can cite that too Planet-GEE-Pipeline-CLI Samapriya Roy. (2018, November 20). samapriya/Planet-GEE-Pipeline-CLI: Planet-GEE-Pipeline-CLI (Version 0.4.2). Zenodo. http://doi.org/10.5281/zenodo.1491969 GEE Asset Manager Addons Samapriya Roy. (2018, November 30). samapriya/porder: porder: Simple CLI for Planet ordersV2 API (Version 0.0.2). Zenodo. http://doi.org/10.5281/zenodo.1729730","title":"Citing Tools"},{"location":"contact/","text":"Contact Us Director of Academic Programs at Planet Email: joe.mascaro@planet.com PhD Candidate, Department of Geography Indiana University Email: samapriya.roy@gmail.com Github: samapriya.github.io","title":"Contact Us"},{"location":"contact/#contact-us","text":"Director of Academic Programs at Planet Email: joe.mascaro@planet.com PhD Candidate, Department of Geography Indiana University Email: samapriya.roy@gmail.com Github: samapriya.github.io","title":"Contact Us"},{"location":"prerequisite/","text":"Register Now for the workshop Before you come to the workshop If you don\u2019t have an Earth Engine developer account sign up for one here Fill out the Google Form the was emailed to you. You can go to the code editor here Wait for me to confirm you have been added to the agu2018 google group then click here to add the workshop repo Install Python I can not think of a better tutorial than Dan Bader's Real Python guide, this is to install Python no matter which operating system you are using. Python 3 Installation Setup Guide Make sure you can then call and use python on your machine using python3 or just python this would on your terminal or command prompt depending on your operating system. Install Chrome Google Earth Engine will work with other browsers as well but often has issues and as such chrome is prescribed for the part using Google Earth Engine. Install Google Chrome and visit this webpage for details on installation with different operating systems .","title":"Register and Setup"},{"location":"prerequisite/#register-now-for-the-workshop","text":"","title":"Register Now for the workshop"},{"location":"prerequisite/#before-you-come-to-the-workshop","text":"If you don\u2019t have an Earth Engine developer account sign up for one here Fill out the Google Form the was emailed to you. You can go to the code editor here Wait for me to confirm you have been added to the agu2018 google group then click here to add the workshop repo","title":"Before you come to the workshop"},{"location":"prerequisite/#install-python","text":"I can not think of a better tutorial than Dan Bader's Real Python guide, this is to install Python no matter which operating system you are using.","title":"Install Python"},{"location":"prerequisite/#python-3-installation-setup-guide","text":"Make sure you can then call and use python on your machine using python3 or just python this would on your terminal or command prompt depending on your operating system.","title":"Python 3 Installation &amp; Setup Guide"},{"location":"prerequisite/#install-chrome","text":"Google Earth Engine will work with other browsers as well but often has issues and as such chrome is prescribed for the part using Google Earth Engine. Install Google Chrome and visit this webpage for details on installation with different operating systems .","title":"Install Chrome"},{"location":"projects/data_api/","text":"Data API Data API is the core API that you will deal with in this workshop. For the most part , the Data API allows you to search for Datasets, activate and download images. You can find entire API reference here and we will access most of the functionality using the Planet Client. The API is self descriptive and allows you to read about specs, items and asset types. You can exlore the data endpoint, by using this webaddress in chrome, use your API key as username and leave password blank https : //api.planet.com/data/v1/","title":"Data API (Search, Activate and Download)"},{"location":"projects/data_api/#data-api","text":"Data API is the core API that you will deal with in this workshop. For the most part , the Data API allows you to search for Datasets, activate and download images. You can find entire API reference here and we will access most of the functionality using the Planet Client. The API is self descriptive and allows you to read about specs, items and asset types. You can exlore the data endpoint, by using this webaddress in chrome, use your API key as username and leave password blank https : //api.planet.com/data/v1/","title":"Data API"},{"location":"projects/downloading-images/","text":"Downloading Images You can download images from Planet using a couple of methods, including but not limited to Planet Explorer or using a client to make requests to the Data API and downloading imagery. Planet Explorer Planet Explorer is probably one of the most useful and beloved interface to interact with and download Planet Labs satellite imagery. Not only does it allow you to filter your images to specific sensors but it also allows you to filter by cloud cover among other things. A neat little trick in Planet Explorer is that once the images are filtered if you want to download multiple images at once in an order you can hold down the control key(if using a windows machine) and click on multiple sets of imagery adding them to the same order. Steps to get satellite imagery from Planet Explorer Once the images have been ordered sit back and relax as the order notification that your delivery is ready to be picked up will be emailed to you. To interact with the Data API and batch download imagery there is host of Planet Platform documentation that teach you how to do that step by step. Batch Download Images Using Planet Python CLI This is the default command line tool that is provided by planet and you can find the project here and it connects to Data API to perform multiple operations such as quick search, activate and download assets among a few other things. Install it easily using pip install planet follow it by planet init to initialize and you are ready to go. A simple setup to download images using a geometry(a simple geometry geojson file) and date range (let us say between 2018-07-01 to 2018-08-31), cloud cover(less than 10% or less than 0.1) could be achieved in a single line of cli command planet data download --item-type PSScene4Band --geom full path to geometry.geojson --date acquired gt 2018-07-01 --date acquired lt 2018-08-31 --range cloud_cover lt 0.1 --asset-type analytic --dest your local directory path Batch Download and Upload to Earth Engine I have also created another stand alone tool apart from the ppipe tool to just download imagery once you have selected area of interest and sensor type. This will work if you have the (Planet Python Client installed). Incase you missed this in housekeeping you can read it again . It is using the Saved search function to allow you to batch download. You can find the tool here . You can pip install it using pip install ppipe This tool is a quick addon to existing application of planet saved searches to download images. This prints all the saved searches that you might have saved using the CLI or using the explorer. In which case you are able to set the filters, choose item types and date ranges and aoi within the Planet Explorer GUI and then be able to use the saved search name to execute a batch download command. This combines activation and download and works only for a single item type that was set in the search. You can choose to provide a limit which limits the number of item-asset combinations to download or use without limit and all items and asset combinations in the aoi will be downloaded. Using with limits python saved_search_download.py search_name analytic C:\\planet_demo 10 Without limits the setup becomes python saved_search_download.py search_name analytic C:\\planet_demo I added the functionality to use Planet's own async downlaoder to download based on a geometry A setup using geojson needs to include other filters too and a typical setup would be ppipe dasync --infile C:\\Users\\johndoe\\geometry.geojson --item PSScene4Band --asset analytic --local C:\\planet --start 2018-06-01 --end 2018-08-01 --cmin 0 --cmax 0.4 Using a stuctured json file that you might have created earlier means you don't have to pass additional filters everytime python ppipe.py dasync --infile C:\\Users\\johndoe\\geometry.json --item PSScene4Band --asset analytic_xml --local C:\\planet_demo However, you can still decide to pass the filters and the filters you pass will overwrite existing filters python ppipe.py dasync --infile C:\\Users\\johndoe\\geometry.json --item PSScene4Band --asset analytic_xml --local C:\\planet_demo --start 2018-06-01 --end 2018-08-01 --cmin 0 --cmax 0.4 porder: Simple CLI for ordersv2 Planet recently released Ordersv2 to do Batch Operations including Clip and Ship, Zip, Email notification , cloud delivery among a few other tools. Read my tutorial and a command line tool for simple applications using ordersv2 here","title":"Downloading Images"},{"location":"projects/downloading-images/#downloading-images","text":"You can download images from Planet using a couple of methods, including but not limited to Planet Explorer or using a client to make requests to the Data API and downloading imagery.","title":"Downloading Images"},{"location":"projects/downloading-images/#planet-explorer","text":"Planet Explorer is probably one of the most useful and beloved interface to interact with and download Planet Labs satellite imagery. Not only does it allow you to filter your images to specific sensors but it also allows you to filter by cloud cover among other things. A neat little trick in Planet Explorer is that once the images are filtered if you want to download multiple images at once in an order you can hold down the control key(if using a windows machine) and click on multiple sets of imagery adding them to the same order. Steps to get satellite imagery from Planet Explorer Once the images have been ordered sit back and relax as the order notification that your delivery is ready to be picked up will be emailed to you. To interact with the Data API and batch download imagery there is host of Planet Platform documentation that teach you how to do that step by step.","title":"Planet Explorer"},{"location":"projects/downloading-images/#batch-download-images","text":"","title":"Batch Download Images"},{"location":"projects/downloading-images/#using-planet-python-cli","text":"This is the default command line tool that is provided by planet and you can find the project here and it connects to Data API to perform multiple operations such as quick search, activate and download assets among a few other things. Install it easily using pip install planet follow it by planet init to initialize and you are ready to go. A simple setup to download images using a geometry(a simple geometry geojson file) and date range (let us say between 2018-07-01 to 2018-08-31), cloud cover(less than 10% or less than 0.1) could be achieved in a single line of cli command planet data download --item-type PSScene4Band --geom full path to geometry.geojson --date acquired gt 2018-07-01 --date acquired lt 2018-08-31 --range cloud_cover lt 0.1 --asset-type analytic --dest your local directory path","title":"Using Planet Python CLI"},{"location":"projects/downloading-images/#batch-download-and-upload-to-earth-engine","text":"I have also created another stand alone tool apart from the ppipe tool to just download imagery once you have selected area of interest and sensor type. This will work if you have the (Planet Python Client installed). Incase you missed this in housekeeping you can read it again . It is using the Saved search function to allow you to batch download. You can find the tool here . You can pip install it using pip install ppipe This tool is a quick addon to existing application of planet saved searches to download images. This prints all the saved searches that you might have saved using the CLI or using the explorer. In which case you are able to set the filters, choose item types and date ranges and aoi within the Planet Explorer GUI and then be able to use the saved search name to execute a batch download command. This combines activation and download and works only for a single item type that was set in the search. You can choose to provide a limit which limits the number of item-asset combinations to download or use without limit and all items and asset combinations in the aoi will be downloaded. Using with limits python saved_search_download.py search_name analytic C:\\planet_demo 10 Without limits the setup becomes python saved_search_download.py search_name analytic C:\\planet_demo I added the functionality to use Planet's own async downlaoder to download based on a geometry A setup using geojson needs to include other filters too and a typical setup would be ppipe dasync --infile C:\\Users\\johndoe\\geometry.geojson --item PSScene4Band --asset analytic --local C:\\planet --start 2018-06-01 --end 2018-08-01 --cmin 0 --cmax 0.4 Using a stuctured json file that you might have created earlier means you don't have to pass additional filters everytime python ppipe.py dasync --infile C:\\Users\\johndoe\\geometry.json --item PSScene4Band --asset analytic_xml --local C:\\planet_demo However, you can still decide to pass the filters and the filters you pass will overwrite existing filters python ppipe.py dasync --infile C:\\Users\\johndoe\\geometry.json --item PSScene4Band --asset analytic_xml --local C:\\planet_demo --start 2018-06-01 --end 2018-08-01 --cmin 0 --cmax 0.4","title":"Batch Download and Upload to Earth Engine"},{"location":"projects/downloading-images/#porder-simple-cli-for-ordersv2","text":"Planet recently released Ordersv2 to do Batch Operations including Clip and Ship, Zip, Email notification , cloud delivery among a few other tools. Read my tutorial and a command line tool for simple applications using ordersv2 here","title":"porder: Simple CLI for ordersv2"},{"location":"projects/getting-images-ee/","text":"Getting Images into Google Earth Engine For the simplest users getting images into GEE begins with the Image upload tool located inside GEE. Once you have added the filename you can edit additional metadata such as start time, cloud cover information if you have that from the metadata file among other things. This tool does not have a way for you to ingest any metadata automatically so it has to be fed manually. The image name is automatically filled in with the filename that you select when uploading. Note you cannot select more than one image and upload as a single image if they overlap each other. To handle which we have the concept of image collections. Where you can upload many images. To import images into collections, you have to either import them manually as images first and then copy them into the collection one by one or for now use an external tool to help. For now you can use the tool I made to batch upload collections along with their metadata into Google Earth Engine. You can read about the tool, it's setup and it's operation at this Planet Story Incase you have a Google Cloud Storage bucket you can also push images automatically to be ingested into GEE. Though this requires interaction with gsutil and starting ingestion function for each image. The GEE guide for image ingestion can be found here Batch upload using ppipe The script creates an Image Collection from GeoTIFFs in your local directory. By default, the collection name is the same as the local directory name; with optional parameter you can provide a different name. You have to process the metadata for images, which is covered in the next section along with a manifest type for Planet image and asset: For this you have to first parse the metadata usage: ppipe upload [-h] --source SOURCE --dest DEST [-m METADATA] [-mf MANIFEST] [--large] [--nodata NODATA] [-u USER] [-s SERVICE_ACCOUNT] [-k PRIVATE_KEY] [-b BUCKET] optional arguments: -h, --help show this help message and exit Required named arguments.: --source SOURCE Path to the directory with images for upload. --dest DEST Destination. Full path for upload to Google Earth Engine, e.g. users/pinkiepie/myponycollection -m METADATA, --metadata METADATA Path to CSV with metadata. -mf MANIFEST, --manifest MANIFEST Manifest type to be used,Choose PS OrthoTile(PSO)|PS OrthoTile DN(PSO_DN)|PS OrthoTile Visual(PSO_V)|PS4Band Analytic(PS4B)|PS4Band DN(PS4B_DN)|PS4Band SR(PS4B_SR)|PS3Band Analytic(PS3B)|PS3Band DN(PS3B_DN)|PS3Band Visual(PS3B_V)|RE OrthoTile (REO)|RE OrthoTile Visual(REO_V) -u USER, --user USER Google account name (gmail address). Optional named arguments: --large (Advanced) Use multipart upload. Might help if upload of large files is failing on some systems. Might cause other issues. --nodata NODATA The value to burn into the raster as NoData (missing data) -s SERVICE_ACCOUNT, --service-account SERVICE_ACCOUNT Google Earth Engine service account. -k PRIVATE_KEY, --private-key PRIVATE_KEY Google Earth Engine private key file. -b BUCKET, --bucket BUCKET Google Cloud Storage bucket name.","title":"Getting Images into Google Earth Engine"},{"location":"projects/getting-images-ee/#getting-images-into-google-earth-engine","text":"For the simplest users getting images into GEE begins with the Image upload tool located inside GEE. Once you have added the filename you can edit additional metadata such as start time, cloud cover information if you have that from the metadata file among other things. This tool does not have a way for you to ingest any metadata automatically so it has to be fed manually. The image name is automatically filled in with the filename that you select when uploading. Note you cannot select more than one image and upload as a single image if they overlap each other. To handle which we have the concept of image collections. Where you can upload many images. To import images into collections, you have to either import them manually as images first and then copy them into the collection one by one or for now use an external tool to help. For now you can use the tool I made to batch upload collections along with their metadata into Google Earth Engine. You can read about the tool, it's setup and it's operation at this Planet Story Incase you have a Google Cloud Storage bucket you can also push images automatically to be ingested into GEE. Though this requires interaction with gsutil and starting ingestion function for each image. The GEE guide for image ingestion can be found here","title":"Getting Images into Google Earth Engine"},{"location":"projects/getting-images-ee/#batch-upload-using-ppipe","text":"The script creates an Image Collection from GeoTIFFs in your local directory. By default, the collection name is the same as the local directory name; with optional parameter you can provide a different name. You have to process the metadata for images, which is covered in the next section along with a manifest type for Planet image and asset: For this you have to first parse the metadata usage: ppipe upload [-h] --source SOURCE --dest DEST [-m METADATA] [-mf MANIFEST] [--large] [--nodata NODATA] [-u USER] [-s SERVICE_ACCOUNT] [-k PRIVATE_KEY] [-b BUCKET] optional arguments: -h, --help show this help message and exit Required named arguments.: --source SOURCE Path to the directory with images for upload. --dest DEST Destination. Full path for upload to Google Earth Engine, e.g. users/pinkiepie/myponycollection -m METADATA, --metadata METADATA Path to CSV with metadata. -mf MANIFEST, --manifest MANIFEST Manifest type to be used,Choose PS OrthoTile(PSO)|PS OrthoTile DN(PSO_DN)|PS OrthoTile Visual(PSO_V)|PS4Band Analytic(PS4B)|PS4Band DN(PS4B_DN)|PS4Band SR(PS4B_SR)|PS3Band Analytic(PS3B)|PS3Band DN(PS3B_DN)|PS3Band Visual(PS3B_V)|RE OrthoTile (REO)|RE OrthoTile Visual(REO_V) -u USER, --user USER Google account name (gmail address). Optional named arguments: --large (Advanced) Use multipart upload. Might help if upload of large files is failing on some systems. Might cause other issues. --nodata NODATA The value to burn into the raster as NoData (missing data) -s SERVICE_ACCOUNT, --service-account SERVICE_ACCOUNT Google Earth Engine service account. -k PRIVATE_KEY, --private-key PRIVATE_KEY Google Earth Engine private key file. -b BUCKET, --bucket BUCKET Google Cloud Storage bucket name.","title":"Batch upload using ppipe"},{"location":"projects/housekeeping/","text":"Housekeeping and Setup For most users data usage often boils down to the software you use to analyze and manipulate images and how you are going to work with them. So here are going to do some housekeeping and setup depending on which tools and setup you are most comfortable with 1) Planet Command Line Interface(CLI) Setup You planet account comes with a brand new CLI and it allows you to perfrom basic functions such as search for ID[s] and for images in a specific location, export all image footprint in your area of interest and so on. Installation is pretty simple pip install planet You installation steps from earlier means you have managed to not only create the Google Earth Engine account but also installed its client. Incase you have missed it go to their main reference page for installation of their python client . 2) Google Earth Engine(GEE) Command Line Interface(CLI) Setup This assumes that you have registered for a Google Earth Engine account but also installed its client. Incase you have missed it go to their main reference page for installation of their python client . Since you can consume Earth Engine using both Javascript(in browser) and Python(locally) the interaction would depend on the scale of your tasks and what you wish your achieve as your end result. Once installed make sure you authenticate your earth engine client and then your CLI should give you the following options 3) Location to GEE datasets For the purpose of this workshop, I have downloaded and ingested Planet 4Band Surface Reflectance imagery into an earth engine image colllection. The included data is maintained as open access license granted by the Open California Program. you can add any of the datasets by simply adding the following lines. For now you access these here //Add image collection and area of interest var collection = ee . ImageCollection ( projects/sat-io/open-ca/ps4bsr ) var aoi = ee . FeatureCollection ( projects/sat-io/open-ca/aoi ) //get size of collection print ( PlanetScope SR , collection . size ()) //Get the first element from each collection print ( PSR Image , collection . first ()) for those using python API you can still access a collection import ee ee . Initialize () collection = ee . ImageCollection ( projects/sat-io/open-ca/ps4bsr ) ##Check how many images does the collection have print ( collection . size () . getInfo ()) ## Print metadata from the first image print ( collection . first () . getInfo ()) 4) Adding additional Images For a minute there imagine you want to work with more data apart from the few areas we talked about, the Education and Research account gives you 10,000 square kilometer and you can then upload it into GEE. For the simplest users getting images into GEE begins with the Image upload tool located inside GEE. Once you have added the filename you can edit additional metadata such as start time, cloud cover information if you have that from the metadata file among other things. This tool does not have a way for you to ingest any metadata automatically so it has to be fed manually. The image name is automatically filled in with the filename that you select when uploading. Note you cannot select more than one image and upload as a single image if they overlap each other. To handle which we have the concept of image collections. Where you can upload many images. To import images into collections, you have to either import them manually as images first and then copy them into the collection one by one or for now use an external tool to help such as using the Google Earth Engine CLI. For now you can use the tool I made to batch upload collections along with their metadata into Google Earth Engine . You can install this by simply typing pip install ppipe You can read about the tool, it's setup and it's operation at this Planet Story Incase you have a Google Cloud Storage bucket you can also push images automatically to be ingested into GEE. Though this requires interaction with gsutil and starting ingestion function for each image. The GEE guide for image ingestion can be found here 5) Additional Tools and Toolboxes for Local Analysis If you need to handle the data locally using Matlab, QGIS or ArcMap make sure you have these softwares installed. The images can then be downloaded and analyzed using multiple methods and toolsets. A lot of these softwares have additional capabilities to help you further use Planet data. You can find a better reference of external integration here ENVI Integration ESRI Integration Cesium Integration Boundless PCI Geomatics","title":"Basic Housekeeping and Setup"},{"location":"projects/housekeeping/#housekeeping-and-setup","text":"For most users data usage often boils down to the software you use to analyze and manipulate images and how you are going to work with them. So here are going to do some housekeeping and setup depending on which tools and setup you are most comfortable with","title":"Housekeeping and Setup"},{"location":"projects/housekeeping/#1-planet-command-line-interfacecli-setup","text":"You planet account comes with a brand new CLI and it allows you to perfrom basic functions such as search for ID[s] and for images in a specific location, export all image footprint in your area of interest and so on. Installation is pretty simple pip install planet You installation steps from earlier means you have managed to not only create the Google Earth Engine account but also installed its client. Incase you have missed it go to their main reference page for installation of their python client .","title":"1) Planet Command Line Interface(CLI) Setup"},{"location":"projects/housekeeping/#2-google-earth-enginegee-command-line-interfacecli-setup","text":"This assumes that you have registered for a Google Earth Engine account but also installed its client. Incase you have missed it go to their main reference page for installation of their python client . Since you can consume Earth Engine using both Javascript(in browser) and Python(locally) the interaction would depend on the scale of your tasks and what you wish your achieve as your end result. Once installed make sure you authenticate your earth engine client and then your CLI should give you the following options","title":"2) Google Earth Engine(GEE) Command Line Interface(CLI) Setup"},{"location":"projects/housekeeping/#3-location-to-gee-datasets","text":"For the purpose of this workshop, I have downloaded and ingested Planet 4Band Surface Reflectance imagery into an earth engine image colllection. The included data is maintained as open access license granted by the Open California Program. you can add any of the datasets by simply adding the following lines. For now you access these here //Add image collection and area of interest var collection = ee . ImageCollection ( projects/sat-io/open-ca/ps4bsr ) var aoi = ee . FeatureCollection ( projects/sat-io/open-ca/aoi ) //get size of collection print ( PlanetScope SR , collection . size ()) //Get the first element from each collection print ( PSR Image , collection . first ()) for those using python API you can still access a collection import ee ee . Initialize () collection = ee . ImageCollection ( projects/sat-io/open-ca/ps4bsr ) ##Check how many images does the collection have print ( collection . size () . getInfo ()) ## Print metadata from the first image print ( collection . first () . getInfo ())","title":"3) Location to GEE datasets"},{"location":"projects/housekeeping/#4-adding-additional-images","text":"For a minute there imagine you want to work with more data apart from the few areas we talked about, the Education and Research account gives you 10,000 square kilometer and you can then upload it into GEE. For the simplest users getting images into GEE begins with the Image upload tool located inside GEE. Once you have added the filename you can edit additional metadata such as start time, cloud cover information if you have that from the metadata file among other things. This tool does not have a way for you to ingest any metadata automatically so it has to be fed manually. The image name is automatically filled in with the filename that you select when uploading. Note you cannot select more than one image and upload as a single image if they overlap each other. To handle which we have the concept of image collections. Where you can upload many images. To import images into collections, you have to either import them manually as images first and then copy them into the collection one by one or for now use an external tool to help such as using the Google Earth Engine CLI. For now you can use the tool I made to batch upload collections along with their metadata into Google Earth Engine . You can install this by simply typing pip install ppipe You can read about the tool, it's setup and it's operation at this Planet Story Incase you have a Google Cloud Storage bucket you can also push images automatically to be ingested into GEE. Though this requires interaction with gsutil and starting ingestion function for each image. The GEE guide for image ingestion can be found here","title":"4) Adding additional Images"},{"location":"projects/housekeeping/#5-additional-tools-and-toolboxes-for-local-analysis","text":"If you need to handle the data locally using Matlab, QGIS or ArcMap make sure you have these softwares installed. The images can then be downloaded and analyzed using multiple methods and toolsets. A lot of these softwares have additional capabilities to help you further use Planet data. You can find a better reference of external integration here ENVI Integration ESRI Integration Cesium Integration Boundless PCI Geomatics","title":"5) Additional Tools and Toolboxes for Local Analysis"},{"location":"projects/imagecollection/","text":"Image Collections in Earth Engine While single images are great to do quick analytics, the true power of the Earth Engine environment comes with the possibility of looking at really large and heavy image collections and to be able to push analysis towards the data, rather than the need for the data to travel at all. In the GEE environment image collections have their own characteristic setup and are composted with single images that we discussed earlier. They can often have the same or different band structure but generally share a similar metadata structure for filtering and querying. Large scale image collections such as Landsat and Sentinel image collections are ingested on the fly and are actively maintained till there imagery and processing pipelines feeds are maintained byt he agencies supplying the imagery. Images as well as image collections can be moved into GEE environment to allow you to use both your data and the GEE catalog data within the same platform. For those who are concerned with access to datasets, this means that though Earth Engine allows an easier way to share datasets across users, private folder, collections and imagery are private and are not here the section from their Terms and Conditions page Intellectual Property Rights. Except as expressly set forth in this Agreement, this Agreement does not grant either party any rights, implied or otherwise, to the other\u2019s content or any of the other\u2019s intellectual property. As between the parties, Customer owns all Intellectual Property Rights in Customer Data, Customer Code, and Application(s), and Google owns all Intellectual Property Rights in the Services and Software. These image collection as well as individual imaegs again have defined data type,scales and projections along with some default properties such as an index and ID among other system properties. So we can query these properties, print them and add them var filtered = ee . ImageCollection ( projects/sat-io/open-ca/ps4bsr ) . filterDate ( 2018-06-01 , 2018-07-30 ) //Filter for June to July End print ( Date Filter Only , filtered . size ()) var filtered = ee . ImageCollection ( projects/sat-io/open-ca/ps4bsr ) . filterDate ( 2018-06-01 , 2018-07-30 ) //Filter for June to July End . filterMetadata ( cloud_cover , less_than , 0.1 ) //Cloud cover less than 10% print ( Multi Filter , filtered . size ()) To have a look at all of the raster catalog you can find them listed here or you can try the list I update every week","title":"Image Collection in Earth Engine"},{"location":"projects/imagecollection/#image-collections-in-earth-engine","text":"While single images are great to do quick analytics, the true power of the Earth Engine environment comes with the possibility of looking at really large and heavy image collections and to be able to push analysis towards the data, rather than the need for the data to travel at all. In the GEE environment image collections have their own characteristic setup and are composted with single images that we discussed earlier. They can often have the same or different band structure but generally share a similar metadata structure for filtering and querying. Large scale image collections such as Landsat and Sentinel image collections are ingested on the fly and are actively maintained till there imagery and processing pipelines feeds are maintained byt he agencies supplying the imagery. Images as well as image collections can be moved into GEE environment to allow you to use both your data and the GEE catalog data within the same platform. For those who are concerned with access to datasets, this means that though Earth Engine allows an easier way to share datasets across users, private folder, collections and imagery are private and are not here the section from their Terms and Conditions page Intellectual Property Rights. Except as expressly set forth in this Agreement, this Agreement does not grant either party any rights, implied or otherwise, to the other\u2019s content or any of the other\u2019s intellectual property. As between the parties, Customer owns all Intellectual Property Rights in Customer Data, Customer Code, and Application(s), and Google owns all Intellectual Property Rights in the Services and Software. These image collection as well as individual imaegs again have defined data type,scales and projections along with some default properties such as an index and ID among other system properties. So we can query these properties, print them and add them var filtered = ee . ImageCollection ( projects/sat-io/open-ca/ps4bsr ) . filterDate ( 2018-06-01 , 2018-07-30 ) //Filter for June to July End print ( Date Filter Only , filtered . size ()) var filtered = ee . ImageCollection ( projects/sat-io/open-ca/ps4bsr ) . filterDate ( 2018-06-01 , 2018-07-30 ) //Filter for June to July End . filterMetadata ( cloud_cover , less_than , 0.1 ) //Cloud cover less than 10% print ( Multi Filter , filtered . size ()) To have a look at all of the raster catalog you can find them listed here or you can try the list I update every week","title":"Image Collections in Earth Engine"},{"location":"projects/images/","text":"Images in Earth Engine In the GEE environment images are stored in Cloud Optimized Geospatial tiles instead of a single image which allows for running an analysis this scale. This means that though the input imagery comes in know formats such as geotiff , MrSid and img these datasets post ingestion into GEE are converted into tiles that are used for at scale analysis. All images that are ingested into either GEE(s) Raster Catalog or your own personal folder and stored in folder or collections of images as you would expect to see when doing deep time stack analysis. These images have defined data type,scales and projections along with some default properties such as an index and ID among other system properties. So we can query these properties, print them and add them //Setting up a Geometry var geometry = ee . FeatureCollection ( projects/sat-io/open-ca/aoi ) //PlanetScope is 4 band imagery, we are adding surface reflectance image with visualization var vis = { opacity : 1 , bands : [ b4 , b3 , b2 ], min : 208 , max : 2385 , gamma : 1 }; //Add an image var image = ee . Image ( projects/sat-io/open-ca/ps4bsr/20180119_181559_1038_3B_AnalyticMS_SR ) print ( Single Image , image ) //Center the Map to the image and add the image Map . centerObject ( geometry , 12 ) Map . addLayer ( image , vis , Image ) //Clip an image var clipped = image . clip ( geometry ) Map . addLayer ( clipped , vis , Clipped Image ) //Change BaseMap to Satellite Map . setOptions ( SATELLITE )","title":"Images in Earth Engine"},{"location":"projects/images/#images-in-earth-engine","text":"In the GEE environment images are stored in Cloud Optimized Geospatial tiles instead of a single image which allows for running an analysis this scale. This means that though the input imagery comes in know formats such as geotiff , MrSid and img these datasets post ingestion into GEE are converted into tiles that are used for at scale analysis. All images that are ingested into either GEE(s) Raster Catalog or your own personal folder and stored in folder or collections of images as you would expect to see when doing deep time stack analysis. These images have defined data type,scales and projections along with some default properties such as an index and ID among other system properties. So we can query these properties, print them and add them //Setting up a Geometry var geometry = ee . FeatureCollection ( projects/sat-io/open-ca/aoi ) //PlanetScope is 4 band imagery, we are adding surface reflectance image with visualization var vis = { opacity : 1 , bands : [ b4 , b3 , b2 ], min : 208 , max : 2385 , gamma : 1 }; //Add an image var image = ee . Image ( projects/sat-io/open-ca/ps4bsr/20180119_181559_1038_3B_AnalyticMS_SR ) print ( Single Image , image ) //Center the Map to the image and add the image Map . centerObject ( geometry , 12 ) Map . addLayer ( image , vis , Image ) //Clip an image var clipped = image . clip ( geometry ) Map . addLayer ( clipped , vis , Clipped Image ) //Change BaseMap to Satellite Map . setOptions ( SATELLITE )","title":"Images in Earth Engine"},{"location":"projects/open-manifest/","text":"Open Manifest Library for Open and Commercial Imagery Ingestion","title":"Additional Projects"},{"location":"projects/open-manifest/#open-manifest-library-for-open-and-commercial-imagery-ingestion","text":"","title":"Open Manifest Library for Open and Commercial Imagery Ingestion"},{"location":"projects/orders/","text":"Orders v2 API Ordersv2 is the next iteration of Planet's API in getting Analysis Ready Data (ARD) delivered to you. Orders v2 allows you to improved functionality in this domain, including capability to submit an number of images in a batch order, and perform operations such as top of atmospheric reflectance, compression, coregistration and also enhanced notifications such as email and webhooks.You can find the API overview and reference here . This is not yet integrated into a client but you can make the requests using clients like Postman or ARC. The API unlike data API is not self descriptive and results will only appear once you have placed an order. You can exlore the data endpoint, by using this webaddress in chrome, use your API key as username and leave password blank https : //api.planet.com/compute/ops/orders/v2 Order Up: Using and Building with Planet \u2019s new Ordersv2 API I did create a simple command line inteface (CLI) called porder to access this API and chain together tools, you can read about the tool and the tutorial here . You can find it on GitHub here .","title":"Ordersv2 API (Search, Order and Download)"},{"location":"projects/orders/#orders-v2-api","text":"Ordersv2 is the next iteration of Planet's API in getting Analysis Ready Data (ARD) delivered to you. Orders v2 allows you to improved functionality in this domain, including capability to submit an number of images in a batch order, and perform operations such as top of atmospheric reflectance, compression, coregistration and also enhanced notifications such as email and webhooks.You can find the API overview and reference here . This is not yet integrated into a client but you can make the requests using clients like Postman or ARC. The API unlike data API is not self descriptive and results will only appear once you have placed an order. You can exlore the data endpoint, by using this webaddress in chrome, use your API key as username and leave password blank https : //api.planet.com/compute/ops/orders/v2","title":"Orders v2 API"},{"location":"projects/orders/#order-up-using-and-building-with-planet-s-new-ordersv2-api","text":"I did create a simple command line inteface (CLI) called porder to access this API and chain together tools, you can read about the tool and the tutorial here . You can find it on GitHub here .","title":"Order Up: Using and Building with Planet \u2019s new Ordersv2 API"},{"location":"projects/planet-asset/","text":"Understand Planet Items-Assets API You can read the most updated white paper on planet products, items, assets and specifications here . While you look at these spec sheets try to understand how you would want to use the data, the purpose and scope of the question you want to answer, the size of downloads and the overall product or derivate in mind. To think of Planet products you have to understand two terms as thought they live in a hierarchy Planet Imagery Product Offerings Items and Assets Item type almost refers exclusively to a family of satellite or sensor types so PlanetScope, RapidEye, Skysat, Landsat and so on are all item types. These are model definitions based on the type of sensor you are utilizing for performing any type of analysis. Asset types are types of item derivatives or data types that you are actually utilizing for example analytic, analytic_sr, analytic_xml, visual and so on. These allow you to choose the type of actual data that you are able to download including the type and level of preprocesing that has been applied to it. For further reference on item asset relationships you can visit the docs Now the assumption here is that after you have created your account you have downloaded data either from Planet Explorer or you have been curious and looked into the data API and used the wonderful python client from planet. Incase you have not and you have python on your system, invoke the power of pip and type pip install planet There is so much more to be done using planet data using some amazing API(s) including What if you wanted to download hundreds and thousands of scenes for your analysis, the Data API will allow you to understand the backend. Planet recently released Ordersv2 to do Batch Operations including Clip and Ship, Zip, Email notification , cloud delivery among a few other tools. Read my tutorial and a command line tool for simple applications using ordersv2 here","title":"Planet Imagery"},{"location":"projects/planet-asset/#understand-planet-items-assets-api","text":"You can read the most updated white paper on planet products, items, assets and specifications here . While you look at these spec sheets try to understand how you would want to use the data, the purpose and scope of the question you want to answer, the size of downloads and the overall product or derivate in mind. To think of Planet products you have to understand two terms as thought they live in a hierarchy Planet Imagery Product Offerings","title":"Understand Planet Items-Assets &amp; API"},{"location":"projects/planet-asset/#items-and-assets","text":"Item type almost refers exclusively to a family of satellite or sensor types so PlanetScope, RapidEye, Skysat, Landsat and so on are all item types. These are model definitions based on the type of sensor you are utilizing for performing any type of analysis. Asset types are types of item derivatives or data types that you are actually utilizing for example analytic, analytic_sr, analytic_xml, visual and so on. These allow you to choose the type of actual data that you are able to download including the type and level of preprocesing that has been applied to it. For further reference on item asset relationships you can visit the docs Now the assumption here is that after you have created your account you have downloaded data either from Planet Explorer or you have been curious and looked into the data API and used the wonderful python client from planet. Incase you have not and you have python on your system, invoke the power of pip and type pip install planet There is so much more to be done using planet data using some amazing API(s) including What if you wanted to download hundreds and thousands of scenes for your analysis, the Data API will allow you to understand the backend. Planet recently released Ordersv2 to do Batch Operations including Clip and Ship, Zip, Email notification , cloud delivery among a few other tools. Read my tutorial and a command line tool for simple applications using ordersv2 here","title":"Items and Assets"},{"location":"projects/planetee/","text":"Introduction As Planet achieved mission one last year it started to map the entire planet every single day. With this came the need to store tremendous amount of data, being able to serve it using our faboulous Planet Explorer and for you be able to dowload it after you created an account. While getting imagery became critically important , the delivery method lead to questions about platforms for analysis. Mission one further meant that you would be able to analyze time series datasets over weekly and bi weekly periods and understand questions that require dynamic analysis such as vegetation patters, climate variability and changes in hydrological cycles. It generated the single largest trove of high frequency dataset in existence with an unprecedented cadence or repeat over areas. Planet by the numbers from Will Marshall\u2019s post \u00a9 Planet Labs With the need to handle such global-scale and often massive data sets, Google was already building and hosting a platform called Google Earth Engine(GEE) designed to analyze geo-spatial data. Google Earth Engine is a cloud based analysis platform that allows for an indexable and queriable raster and vector environment while including and expanding on raster capabilities. It allows for users to perform large scale analysis on large scale datasets such as Planet's very own. You can read more about the Google Earth Engine platform here These set of tutorials will introduce you to methods in getting imagery onto the Google Earth Engine platform, and how do you quickly visualize and analyze the datasets with the GEE platform. With the multitude of tools and possibilities of building your own analysis tools. The first of it's kind tools will include basic methods such as 4 band operations and can include complex operations in machine learning as the platform evolves. For more information and developer guide on Google Earth Engine you can visit their developer console .","title":"Planet & Google Earth Engine"},{"location":"projects/planetee/#introduction","text":"As Planet achieved mission one last year it started to map the entire planet every single day. With this came the need to store tremendous amount of data, being able to serve it using our faboulous Planet Explorer and for you be able to dowload it after you created an account. While getting imagery became critically important , the delivery method lead to questions about platforms for analysis. Mission one further meant that you would be able to analyze time series datasets over weekly and bi weekly periods and understand questions that require dynamic analysis such as vegetation patters, climate variability and changes in hydrological cycles. It generated the single largest trove of high frequency dataset in existence with an unprecedented cadence or repeat over areas. Planet by the numbers from Will Marshall\u2019s post \u00a9 Planet Labs With the need to handle such global-scale and often massive data sets, Google was already building and hosting a platform called Google Earth Engine(GEE) designed to analyze geo-spatial data. Google Earth Engine is a cloud based analysis platform that allows for an indexable and queriable raster and vector environment while including and expanding on raster capabilities. It allows for users to perform large scale analysis on large scale datasets such as Planet's very own. You can read more about the Google Earth Engine platform here These set of tutorials will introduce you to methods in getting imagery onto the Google Earth Engine platform, and how do you quickly visualize and analyze the datasets with the GEE platform. With the multitude of tools and possibilities of building your own analysis tools. The first of it's kind tools will include basic methods such as 4 band operations and can include complex operations in machine learning as the platform evolves. For more information and developer guide on Google Earth Engine you can visit their developer console .","title":"Introduction"},{"location":"projects/query-plot/","text":"Analytics: Query and Plot Assuming you had already filled in the Google Form and accepted the Google repository, you should now have access to this toolbox. Remember you have access to both the datasets and the toolbox through the Google Group. We are going to use the toolbox to query, analyze Planet datasets. These are in no way a complete list of complex functionalities of Planet Imagery with Google Earth Engine but they are useful starting points. This code allows you to query our ingested dataset and plot a monthly count histogram. You can create some other useful animations like heatmaps to represent image count over specific areas. Tool 1 in your toolbox lets you print the collection size, a single image to check its metadata and create monthly frequencies. You can also copy and edit the code form below //Add AOI and add Image Collection var collection = ee . ImageCollection ( projects/sat-io/open-ca/ps4bsr ) var aoi = ee . FeatureCollection ( projects/sat-io/open-ca/aoi ) //Center at the AOI Map . centerObject ( aoi , 14 ) //Get Collection Size print ( collection . size ()) //Inspect a single image and metadata print ( collection . first ()) //Add visualization var vis = { opacity : 1 , bands : [ b4 , b3 , b2 ], min : 608.6288888888889 , max : 2665.4822222222224 , gamma : 1.856 }; //Clip and Add an Image Map . addLayer ( collection . median (). clip ( aoi ), vis , Median PS4B SR , false ) //Create Monthly Frequency Histogram var collection = ee . ImageCollection ( projects/sat-io/open-ca/ps4bsr ) . map ( function ( img ) { var date = ee . Date ( img . get ( system:time_start )) return img . set ( month , date . get ( month )); }) print ( Chart . feature . histogram ( collection , month ))","title":"Query & Plot"},{"location":"projects/query-plot/#analytics-query-and-plot","text":"Assuming you had already filled in the Google Form and accepted the Google repository, you should now have access to this toolbox. Remember you have access to both the datasets and the toolbox through the Google Group. We are going to use the toolbox to query, analyze Planet datasets. These are in no way a complete list of complex functionalities of Planet Imagery with Google Earth Engine but they are useful starting points. This code allows you to query our ingested dataset and plot a monthly count histogram. You can create some other useful animations like heatmaps to represent image count over specific areas. Tool 1 in your toolbox lets you print the collection size, a single image to check its metadata and create monthly frequencies. You can also copy and edit the code form below //Add AOI and add Image Collection var collection = ee . ImageCollection ( projects/sat-io/open-ca/ps4bsr ) var aoi = ee . FeatureCollection ( projects/sat-io/open-ca/aoi ) //Center at the AOI Map . centerObject ( aoi , 14 ) //Get Collection Size print ( collection . size ()) //Inspect a single image and metadata print ( collection . first ()) //Add visualization var vis = { opacity : 1 , bands : [ b4 , b3 , b2 ], min : 608.6288888888889 , max : 2665.4822222222224 , gamma : 1.856 }; //Clip and Add an Image Map . addLayer ( collection . median (). clip ( aoi ), vis , Median PS4B SR , false ) //Create Monthly Frequency Histogram var collection = ee . ImageCollection ( projects/sat-io/open-ca/ps4bsr ) . map ( function ( img ) { var date = ee . Date ( img . get ( system:time_start )) return img . set ( month , date . get ( month )); }) print ( Chart . feature . histogram ( collection , month ))","title":"Analytics: Query and Plot"},{"location":"projects/setup/","text":"Registering for a Planet account What you need first to get started in simply to register for a Planet account. These account will almost immediately gain access to the Open California Dataset which is maintained regulary at this spatial and temporal resolution. You can find more information about the Open California project here . These datasets and full-resolution imagery for the entire state of California are covered under a CC BY-SA 4.0 license via Planet's Open California initiative. Basic Account To sign up, visit planet.com/explorer . From there, click Sign Up and enter your email address to receive an invitation: Check your email follow the directions to complete the registration process. Trial Account If you need an account in a hurry register for the Trial account, gives you 14 day global access with some limits. Once the trial ends you can still browse using the Planet Explorer and ask for a license or subscription. Education and Research users If you are a university researchers, academics, and/or scientists, your free account allows you to download 10,000 square kilometers of data for non commercial use, every month, anywhere in the world. You can apply for Education and Research account here Find your API Key Planet Explorer is a powerful tool for exploring Planet's catalog of daily imagery and worldwide mosaics directly in your browser. It's also your gateway to creating a Planet Account,and gaining access to Planet's APIs. To use Planet's APIs, you'll need an API key. API keys are available to all registered users with active Planet accounts.Once you're signed up, log in to planet.com/account to get your API key. Find the API key field under your account information, as seen here: Account information (not a real API key) Registering for a Google Earth Engine Account If you don\u2019t have a developer account sign up for one here and make sure you follow the instructions to install the python CLI. The API and the CLI gets updated frequently and as does the install process as needed so you can read the latest instructions at the page. Getting Help with Planet and Google Earth Engine Both Planet and Google Earth Engine maintain a developer page for you to find out more information,test tutorials along with housing a few quick FAQ(s) You can find Planet Developer Site here and offcourse the Earth Engine Developers Page","title":"Setting up your Accounts"},{"location":"projects/setup/#registering-for-a-planet-account","text":"What you need first to get started in simply to register for a Planet account. These account will almost immediately gain access to the Open California Dataset which is maintained regulary at this spatial and temporal resolution. You can find more information about the Open California project here . These datasets and full-resolution imagery for the entire state of California are covered under a CC BY-SA 4.0 license via Planet's Open California initiative.","title":"Registering for a Planet account"},{"location":"projects/setup/#basic-account","text":"To sign up, visit planet.com/explorer . From there, click Sign Up and enter your email address to receive an invitation: Check your email follow the directions to complete the registration process.","title":"Basic Account"},{"location":"projects/setup/#trial-account","text":"If you need an account in a hurry register for the Trial account, gives you 14 day global access with some limits. Once the trial ends you can still browse using the Planet Explorer and ask for a license or subscription.","title":"Trial Account"},{"location":"projects/setup/#education-and-research-users","text":"If you are a university researchers, academics, and/or scientists, your free account allows you to download 10,000 square kilometers of data for non commercial use, every month, anywhere in the world. You can apply for Education and Research account here","title":"Education and Research users"},{"location":"projects/setup/#find-your-api-key","text":"Planet Explorer is a powerful tool for exploring Planet's catalog of daily imagery and worldwide mosaics directly in your browser. It's also your gateway to creating a Planet Account,and gaining access to Planet's APIs. To use Planet's APIs, you'll need an API key. API keys are available to all registered users with active Planet accounts.Once you're signed up, log in to planet.com/account to get your API key. Find the API key field under your account information, as seen here: Account information (not a real API key)","title":"Find your API Key"},{"location":"projects/setup/#registering-for-a-google-earth-engine-account","text":"If you don\u2019t have a developer account sign up for one here and make sure you follow the instructions to install the python CLI. The API and the CLI gets updated frequently and as does the install process as needed so you can read the latest instructions at the page.","title":"Registering for a Google Earth Engine Account"},{"location":"projects/setup/#getting-help-with-planet-and-google-earth-engine","text":"Both Planet and Google Earth Engine maintain a developer page for you to find out more information,test tutorials along with housing a few quick FAQ(s) You can find Planet Developer Site here and offcourse the Earth Engine Developers Page","title":"Getting Help with Planet and Google Earth Engine"}]}